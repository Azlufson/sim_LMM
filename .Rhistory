library(parallel)
library(tidyverse)
library(lme4)
library(lmerTest)
library(pbkrtest)
library(afex)
library(languageR)
#model
model <- y ~ obs + cond + (1|subj)
lmm <- lmer(model, sim_data.n_int())
##Datengeneration
#einfaches Modell nur mit random intercept
# y = b0 + b1*obs + b2*cond + (1|subj) + epsilon
#n.subj und n.obs müssen gerade sein
sim_data.n_int <- function(n.subj = 10, n.obs = 6, b0 = 10, beta_obs = 0, beta_cond = 5, sd.int_subj = 6, sd_eps = 2) {
subj <- rep(1:n.subj, each = n.obs)
obs <- rep(rep(c(0,1), each = n.obs/2), n.subj)
cond <- rep(c(0,1), n.subj*n.obs/2)
subj_int <- rep(rnorm(n.subj, 0, sd.int_subj), each = n.obs)
y <- b0 + beta_obs * obs + beta_cond * cond + subj_int + rnorm(n.obs*n.subj, 0, sd_eps)
return(data.frame(subj, obs, cond, y))
}
lmm <- lmer(model, sim_data.n_int())
pvals.fnc(lmm)
library(lmerTest)
pvals.fnc(lmm)
lmm <- lmer(model, sim_data.n_int())
pvals.fnc(lmm)
#Parameter für Simulationen
beta_obs <- 0 #auf diesen fixed effect wird jeweils getestet
grid <- seq(0, 1, .2)
colnames(grid) <- c("ES")
ES <- seq(0, 1, .2)
#future_apply
plan("multisession", workers = detectCores())
library(future.apply)
library(parallel)
library(tidyverse)
library(lme4)
library(lmerTest)
library(pbkrtest)
library(afex)
#future_apply
plan("multisession", workers = detectCores())
#model
model <- y ~ obs + cond + (1|subj)
#Parameter für Simulationen
beta_obs <- 0 #auf diesen fixed effect wird jeweils getestet
ES <- seq(0, 1, .2)
t(future_apply(ES, 1, function(x) replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null)), future.seed = TRUE))
t(future_sapply(ES, function(x) replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null)), future.seed = TRUE))
#Parameter für Simulationen
nsim <- 10
t(future_sapply(ES, function(x) replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null)), future.seed = TRUE))
##Datengeneration
#einfaches Modell nur mit random intercept
# y = b0 + b1*obs + b2*cond + (1|subj) + epsilon
#n.subj und n.obs müssen gerade sein
sim_data.n_int <- function(n.subj = 10, n.obs = 6, b0 = 10, beta_obs = 0, beta_cond = 5, sd.int_subj = 6, sd_eps = 2) {
subj <- rep(1:n.subj, each = n.obs)
obs <- rep(rep(c(0,1), each = n.obs/2), n.subj)
cond <- rep(c(0,1), n.subj*n.obs/2)
subj_int <- rep(rnorm(n.subj, 0, sd.int_subj), each = n.obs)
y <- b0 + beta_obs * obs + beta_cond * cond + subj_int + rnorm(n.obs*n.subj, 0, sd_eps)
return(data.frame(subj, obs, cond, y))
}
test_lrtstat <- function(data, m.full, m.null, REML = TRUE) {
full <- lmer(m.full, data = data, REML = REML)
null <- lmer(m.null, data = data, REML = REML)
return(pchisq(as.numeric(2 * (logLik(full) - logLik(null))), 1, lower = FALSE))
}
##t-as-z
test_TasZ.fixed <- function(data, m.full, REML = TRUE) {
return(summary(lmer(model, data = data, REML = REML))$coefficients[2,4])
}
##KR, SW
#ddf ... Art der Approximation
test_approx.fixed <- function(data, model, REML = TRUE, ddf = "Satterthwaite") {
return(anova(lmer(model, data = data, REML = REML), ddf = ddf)$`Pr(>F)`[1])
}
##Funktion zur Ausgabe des p-Wertes des fixed effects via parametric bootstrap
#mixed auf afex (nutzt pbmodcomp)
#nsim.pb bestimmt anzahl an bootstrap-simulationen von pbmodcomp
#cl erlaubt multicore nutzung (via package parallel)
test_PB.fixed <- function(mode, data, nsim.pb = 1000, cl = NULL) {
return(suppressMessages(mixed(model, data = data, method = "PB", progress = FALSE, cl = cl, args_test = list(nsim = nsim.pb, cl = cl))$anova_table$`Pr(>PB)`[1]))
}
#full and null model (LRT):
m.full <- y ~ obs + cond + (1|subj)
m.null <- y ~ cond + (1|subj)
#model
model <- y ~ obs + cond + (1|subj)
#Parameter für Simulationen
nsim <- 10
beta_obs <- 0 #auf diesen fixed effect wird jeweils getestet
ES <- seq(0, 1, .2)
t(future_sapply(ES, function(x) replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null)), future.seed = TRUE))
#Parameter für Simulationen
nsim <- 10
beta_obs <- 0 #auf diesen fixed effect wird jeweils getestet
ES <- seq(0, 1, .2)
#future_apply
plan("multisession", workers = detectCores())
#Parameter für parametric bootstrap
nsim.mixed <- 100 #niedriger, weil pro iteration auch noch gebootstrapped wird (mit nsim.pb)
nsim.pb <- 500
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(future_sapply(ES, function(x) replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null)), future.seed = TRUE))
#Parameter für Simulationen
nsim <- 100
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(future_sapply(ES, function(x) replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null)), future.seed = TRUE))
data_LRT.REML_long <- cbind(ES, data_LRT.REML)
data_LRT.REML_long <- gather(data_LRT.REML_long, sim, p.LRT.REML, (ncol(ES)+1):ncol(data_LRT.REML_long))
data_LRT.REML_long
data_LRT.REML_long %>%
group_by(n.subj, n.obs) %>%
summarize(prop_LRT.REML = mean(p.LRT.REML <= .05))
data_LRT.REML_long <- gather(data_LRT.REML_long, sim, p.LRT.REML, (ncol(ES)+1):ncol(data_LRT.REML_long))
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(future_sapply(ES, function(x) replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null)), future.seed = TRUE))
data_LRT.REML
data_LRT.REML_long <- cbind(ES, data_LRT.REML)
data_LRT.REML_long %>%
group_by(ES) %>%
summarize(prop_LRT.REML = mean(p.LRT.REML <= .05))
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(future_apply(grid, 1, function(x) replicate(nsim, test_lrtstat(sim_data.n_int(n.subj = x[1], n.obs = x[2], beta_obs = beta_obs), m.full, m.null)), future.seed = TRUE))
beta_obs <- 0 #auf diesen fixed effect wird jeweils getestet
n.subj <- c(4, 6, 10, 16)
n.obs <- c(4, 6, 10, 16)
grid <- expand.grid(n.subj, n.obs)
colnames(grid) <- c("n.subj", "n.obs")
#future_apply
plan("multisession", workers = detectCores())
#Parameter für parametric bootstrap
nsim.mixed <- 100 #niedriger, weil pro iteration auch noch gebootstrapped wird (mit nsim.pb)
nsim.pb <- 500
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(future_apply(grid, 1, function(x) replicate(nsim, test_lrtstat(sim_data.n_int(n.subj = x[1], n.obs = x[2], beta_obs = beta_obs), m.full, m.null)), future.seed = TRUE))
data_LRT.REML
data_LRT.REML_long <- cbind(grid, data_LRT.REML)
data_LRT.REML_long <- gather(data_LRT.REML_long, sim, p.LRT.REML, (ncol(grid)+1):ncol(data_LRT.REML_long))
data_LRT.REML_long
#Parameter für Simulationen
nsim <- 100
beta_obs <- 0 #auf diesen fixed effect wird jeweils getestet
ES <- seq(0, 1, .2)
#future_apply
plan("multisession", workers = detectCores())
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(future_sapply(ES, function(x) replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null)), future.seed = TRUE))
?future_sapply
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(apply(grid, 1, function(x) future_replicate(nsim, test_lrtstat(sim_data.n_int(n.subj = x[1], n.obs = x[2], beta_obs = beta_obs), m.full, m.null))))
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(apply(ES, function(x) future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null)), future.seed = TRUE))
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(sapply(ES, function(x) future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null)), future.seed = TRUE))
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(sapply(ES, function(x) future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null))))
#Parameter für Simulationen
nsim <- 5
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(sapply(ES, function(x) future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null))))
data_LRT.REML_long <- cbind(ES, data_LRT.REML)
data_LRT.REML_long <- gather(data_LRT.REML_long, sim, p.LRT.REML, (ncol(ES)+1):ncol(data_LRT.REML_long))
data_LRT.REML_long
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(future_apply(grid, 1, function(x) replicate(nsim, test_lrtstat(sim_data.n_int(n.subj = x[1], n.obs = x[2], beta_obs = beta_obs), m.full, m.null)), future.seed = TRUE))
data_LRT.REML_long <- cbind(grid, data_LRT.REML)
data_LRT.REML_long
?sapply
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(sapply(ES, function(x) future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null)), simplify = FALSE))
data_LRT.REML_long <- cbind(ES, data_LRT.REML)
data_LRT.REML
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- sapply(ES, function(x) future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null)), simplify = FALSE)
data_LRT.REML
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- vapply(ES, function(x) future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null)))
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- apply(ES, 1, function(x) future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null)))
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- lpply(ES, function(x) future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null)))
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- lapply(ES, function(x) future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null)))
data_LRT.REML
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- unlist(lapply(ES, function(x) future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null))))
data_LRT.REML
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- sapply(ES, function(x) future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null), simplify = TRUE))
data_LRT.REML
data_LRT.REML_long <- cbind(ES, data_LRT.REML)
data_LRT.REML
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(sapply(ES, function(x) future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null), simplify = TRUE)))
data_LRT.REML_long <- cbind(ES, data_LRT.REML)
data_LRT.REML_long <- gather(data_LRT.REML_long, sim, p.LRT.REML, (ncol(ES)+1):ncol(data_LRT.REML_long))
data_LRT.REML_long
colnames(data_LRT.REML) <- 1:5
data_LRT.REML_long <- cbind(ES, data_LRT.REML)
data_LRT.REML_long
colnames(data_LRT.REML) <- 1:length(ES)
length(ES)
colnames(data_LRT.REML) <- 1:nsim
data_LRT.REML_long <- cbind(ES, data_LRT.REML)
data_LRT.REML_long <- gather(data_LRT.REML_long, sim, p.LRT.REML, (ncol(ES)+1):ncol(data_LRT.REML_long))
data_LRT.REML_long
data_LRT.REML_long <- as.data.frame(cbind(ES, data_LRT.REML))
data_LRT.REML_long <- gather(data_LRT.REML_long, sim, p.LRT.REML, (ncol(ES)+1):ncol(data_LRT.REML_long))
data_LRT.REML_long
data_LRT.REML_long
data_LRT.REML_long <- gather(data_LRT.REML_long, sim, p.LRT.REML, 2:ncol(data_LRT.REML_long))
data_LRT.REML_long
data_LRT.REML_long %>%
group_by(ES) %>%
summarize(prop_LRT.REML = mean(p.LRT.REML <= .05))
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(sapply(ES, function(x) future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null))))
colnames(data_LRT.REML) <- 1:nsim
data_LRT.REML_long <- as.data.frame(cbind(ES, data_LRT.REML))
data_LRT.REML_long <- gather(data_LRT.REML_long, sim, p.LRT.REML, 2:ncol(data_LRT.REML_long))
data_LRT.REML_long %>%
group_by(ES) %>%
summarize(prop_LRT.REML = mean(p.LRT.REML <= .05))
data_LRT.REML_long
##Daten für Plot:
p_LRT.REML <- data_LRT.REML_long %>%
group_by(n.subj, n.obs) %>%
summarize(k = sum(p.LRT.REML < .05) + 1.96^2/2,
n = n() + 1.96^2,
p = k/n,
p_l = p - 1.96 * sqrt(p*(1-p)/n),
p_u = p + 1.96 * sqrt(p*(1-p)/n)) %>%
select(n.obs, n.subj, p, p_l, p_u) %>%
mutate(REML = 1,
method = 1)
##Daten für Plot:
p_LRT.REML <- data_LRT.REML_long %>%
group_by(ES) %>%
summarize(k = sum(p.LRT.REML < .05) + 1.96^2/2,
n = n() + 1.96^2,
p = k/n,
p_l = p - 1.96 * sqrt(p*(1-p)/n),
p_u = p + 1.96 * sqrt(p*(1-p)/n)) %>%
select(ES, p, p_l, p_u) %>%
mutate(REML = 1,
method = 1)
p_LRT.REML
##ML
data_LRT.ML <- t(sapply(ES, 1, function(x) future <- replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null, REML = FALSE))))
##ML
data_LRT.ML <- t(sapply(ES, function(x) future <- replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null, REML = FALSE))))
colnames(data_LRT.ML) <- 1:nsim
data_LRT.ML_long <- as.data.frame(cbind(ES, data_LRT.ML))
data_LRT.ML_long <- gather(data_LRT.ML_long, sim, p.LRT.ML, (ncol(ES)+1):ncol(data_LRT.ML_long))
data_LRT.ML_long <- gather(data_LRT.ML_long, sim, p.LRT.ML, 2:ncol(data_LRT.ML_long))
data_LRT.ML_long %>%
group_by(n.subj, n.obs) %>%
summarize(prop_LRT.ML = mean(p.LRT.ML <= .05))
data_LRT.ML_long %>%
group_by(ES) %>%
summarize(prop_LRT.ML = mean(p.LRT.ML <= .05))
p_LRT.ML <- data_LRT.ML_long %>%
group_by(ES) %>%
summarize(k = sum(p.LRT.ML < .05) + 1.96^2/2,
n = n() + 1.96^2,
p = k/n,
p_l = p - 1.96 * sqrt(p*(1-p)/n),
p_u = p + 1.96 * sqrt(p*(1-p)/n)) %>%
select(ES, p, p_l, p_u) %>%
mutate(REML = 0,
method = 1)
p_LRT.ML
##ML
data_TasZ.ML <- t(sapply(ES, 1, function(x) future_replicate(nsim, test_TasZ.fixed(sim_data.n_int(n.subj = x[1], n.obs = x[2], beta_obs = beta_obs), model, REML = FALSE))))
##ML
data_TasZ.ML <- t(sapply(ES, function(x) future_replicate(nsim, test_TasZ.fixed(sim_data.n_int(n.subj = x[1], n.obs = x[2], beta_obs = beta_obs), model, REML = FALSE))))
##ML
data_TasZ.ML <- t(sapply(ES, function(x) future_replicate(nsim, test_TasZ.fixed(sim_data.n_int(beta_obs = x), model, REML = FALSE))))
colnames(data_TasZ.ML) <- 1:nsim
data_TasZ.ML_long <- as.data.frame(cbind(ES, data_TasZ.ML))
data_TasZ.ML_long <- gather(data_TasZ.ML_long, sim, p.TasZ.ML, (ncol(ES)+1):ncol(data_TasZ.ML_long))
data_TasZ.REML_long <- gather(data_TasZ.REML_long, sim, p.TasZ.REML, 2:ncol(data_TasZ.REML_long))
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(sapply(ES, function(x) future_future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null))))
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(sapply(ES, function(x) future_future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null))))
###LRT
##REML (nicht empfohlen)
data_LRT.REML <- t(sapply(ES, function(x) future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null))))
colnames(data_LRT.REML) <- 1:nsim
data_LRT.REML_long <- as.data.frame(cbind(ES, data_LRT.REML))
data_LRT.REML_long <- gather(data_LRT.REML_long, sim, p.LRT.REML, 2:ncol(data_LRT.REML_long))
data_LRT.REML_long %>%
group_by(ES) %>%
summarize(prop_LRT.REML = mean(p.LRT.REML <= .05))
##Daten für Plot:
p_LRT.REML <- data_LRT.REML_long %>%
group_by(ES) %>%
summarize(k = sum(p.LRT.REML < .05) + 1.96^2/2,
n = n() + 1.96^2,
p = k/n,
p_l = p - 1.96 * sqrt(p*(1-p)/n),
p_u = p + 1.96 * sqrt(p*(1-p)/n)) %>%
select(ES, p, p_l, p_u) %>%
mutate(REML =
method = 1)
##Daten für Plot:
p_LRT.REML <- data_LRT.REML_long %>%
group_by(ES) %>%
summarize(k = sum(p.LRT.REML < .05) + 1.96^2/2,
n = n() + 1.96^2,
p = k/n,
p_l = p - 1.96 * sqrt(p*(1-p)/n),
p_u = p + 1.96 * sqrt(p*(1-p)/n)) %>%
select(ES, p, p_l, p_u) %>%
mutate(REML =
method = 1)
##Daten für Plot:
p_LRT.REML <- data_LRT.REML_long %>%
group_by(ES) %>%
summarize(k = sum(p.LRT.REML < .05) + 1.96^2/2,
n = n() + 1.96^2,
p = k/n,
p_l = p - 1.96 * sqrt(p*(1-p)/n),
p_u = p + 1.96 * sqrt(p*(1-p)/n)) %>%
select(ES, p, p_l, p_u) %>%
mutate(REML = 1,
method = 1)
##ML
data_LRT.ML <- t(sapply(ES, function(x) future <- future_replicate(nsim, test_lrtstat(sim_data.n_int(beta_obs = x), m.full, m.null, REML = FALSE))))
colnames(data_LRT.ML) <- 1:nsim
data_LRT.ML_long <- as.data.frame(cbind(ES, data_LRT.ML))
data_LRT.ML_long <- gather(data_LRT.ML_long, sim, p.LRT.ML, 2:ncol(data_LRT.ML_long))
data_LRT.ML_long %>%
group_by(ES) %>%
summarize(prop_LRT.ML = mean(p.LRT.ML <= .05))
p_LRT.ML <- data_LRT.ML_long %>%
group_by(ES) %>%
summarize(k = sum(p.LRT.ML < .05) + 1.96^2/2,
n = n() + 1.96^2,
p = k/n,
p_l = p - 1.96 * sqrt(p*(1-p)/n),
p_u = p + 1.96 * sqrt(p*(1-p)/n)) %>%
select(ES, p, p_l, p_u) %>%
mutate(REML = 0,
method = 1)
###t-as-z
##REML
data_TasZ.REML <- t(sapply(ES, function(x) future_replicate(nsim, test_TasZ.fixed(sim_data.n_int(beta_obs = x), model))))
colnames(data_TasZ.REML) <- 1:nsim
data_TasZ.REML_long <- as.data.frame(cbind(ES, data_TasZ.REML))
data_TasZ.REML_long <- gather(data_TasZ.REML_long, sim, p.TasZ.REML, 2:ncol(data_TasZ.REML_long))
data_TasZ.REML_long %>%
group_by(ES) %>%
summarize(prop_TasZ.REML = mean(abs(p.TasZ.REML) >= 1.96))
p_TasZ.REML <- data_TasZ.REML_long %>%
group_by(ES) %>%
summarize(k = sum(abs(p.TasZ.REML) >= 1.96) + 1.96^2/2,
n = n() + 1.96^2,
p = k/n,
p_l = p - 1.96 * sqrt(p*(1-p)/n),
p_u = p + 1.96 * sqrt(p*(1-p)/n)) %>%
select(ES, p, p_l, p_u) %>%
mutate(REML = 1,
method = 2)
p_TasZ.REML
##ML
data_TasZ.ML <- t(sapply(ES, function(x) future_replicate(nsim, test_TasZ.fixed(sim_data.n_int(beta_obs = x), model, REML = FALSE))))
colnames(data_TasZ.ML) <- 1:nsim
data_TasZ.ML_long <- as.data.frame(cbind(ES, data_TasZ.ML))
data_TasZ.ML_long <- gather(data_TasZ.ML_long, sim, p.TasZ.ML, 2:ncol(data_TasZ.ML_long))
data_TasZ.ML_long %>%
group_by(ES) %>%
summarize(prop_TasZ.ML = mean(abs(p.TasZ.ML) >= 1.96))
p_TasZ.ML <- data_TasZ.ML_long %>%
group_by(ES) %>%
summarize(k = sum(abs(p.TasZ.ML) >= 1.96) + 1.96^2/2,
n = n() + 1.96^2,
p = k/n,
p_l = p - 1.96 * sqrt(p*(1-p)/n),
p_u = p + 1.96 * sqrt(p*(1-p)/n)) %>%
select(ES, p, p_l, p_u) %>%
mutate(REML = 0,
method = 2)
p_TasZ.ML
data_SW.REML <- t(sapply(ES, function(x) future_replicate(nsim, test_approx.fixed(sim_data.n_int(beta_obs = x), model, REML = REML, ddf = ddf))))
##Sattherthwaire, REML
ddf <- "Satterthwaite"
REML <- TRUE
data_SW.REML <- t(sapply(ES, function(x) future_replicate(nsim, test_approx.fixed(sim_data.n_int(beta_obs = x), model, REML = REML, ddf = ddf))))
colnames(data_SW.REML) <- 1:nsim
data_SW.REML_long <- as.data.frame(cbind(ES, data_SW.REML))
data_SW.REML_long <- gather(data_SW.REML_long, sim, p.SW.REML, 2:ncol(data_SW.REML_long))
data_SW.REML_long %>%
group_by(ES) %>%
summarize(prop_SW.REML = mean(p.SW.REML <= .05))
p_SW.REML <- data_SW.REML_long %>%
group_by(ES) %>%
summarize(k = sum(p.SW.REML < .05) + 1.96^2/2,
n = n() + 1.96^2,
p = k/n,
p_l = p - 1.96 * sqrt(p*(1-p)/n),
p_u = p + 1.96 * sqrt(p*(1-p)/n)) %>%
select(ES, p, p_l, p_u) %>%
mutate(REML = 1,
method = 3)
##Kenward-Roger, REML
ddf <- "Kenward-Roger"
REML <- TRUE
data_KR.REML <- t(sapply(ES, function(x) future_replicate(nsim, test_approx.fixed(sim_data.n_int(beta_obs = x), model, REML = TRUE, ddf = "Satterthwaite"))))
colnames(data_KR.REML) <- 1:nsim
data_KR.REML_long <- âs.data.frame(cbind(ES, data_KR.REML))
data_KR.REML_long <- as.data.frame(cbind(ES, data_KR.REML))
data_KR.REML_long <- gather(data_KR.REML_long, sim, p.KR.REML, 2:ncol(data_KR.REML_long))
data_KR.REML_long %>%
group_by(ES) %>%
summarize(prop_KR.REML = mean(p.KR.REML <= .05))
p_KR.REML <- data_KR.REML_long %>%
group_by(ES) %>%
summarize(k = sum(p.KR.REML < .05) + 1.96^2/2,
n = n() + 1.96^2,
p = k/n,
p_l = p - 1.96 * sqrt(p*(1-p)/n),
p_u = p + 1.96 * sqrt(p*(1-p)/n)) %>%
select(n.obs, n.subj, p, p_l, p_u) %>%
mutate(REML = 1,
method = 4)
p_KR.REML <- data_KR.REML_long %>%
group_by(ES) %>%
summarize(k = sum(p.KR.REML < .05) + 1.96^2/2,
n = n() + 1.96^2,
p = k/n,
p_l = p - 1.96 * sqrt(p*(1-p)/n),
p_u = p + 1.96 * sqrt(p*(1-p)/n)) %>%
select(ES, p, p_l, p_u) %>%
mutate(REML = 1,
method = 4)
p_KR.REML
data_SW.ML <- t(sapply(ES, function(x) future_replicate(nsim, test_approx.fixed(sim_data.n_int(beta_obs = x), model, REML = TRUE, ddf = "Satterthwaite"))))
colnames(data_SW.ML) <- 1:nsim
data_SW.ML_long <- as.data.frame(cbind(ES, data_SW.ML))
data_SW.ML_long <- gather(data_SW.ML_long, sim, p.SW.ML, 2:ncol(data_SW.ML_long))
data_SW.ML_long %>%
group_by(ES) %>%
summarize(prop_SW.ML = mean(p.SW.ML <= .05))
p_SW.ML <- data_SW.ML_long %>%
group_by(ES) %>%
summarize(k = sum(p.SW.ML < .05) + 1.96^2/2,
n = n() + 1.96^2,
p = k/n,
p_l = p - 1.96 * sqrt(p*(1-p)/n),
p_u = p + 1.96 * sqrt(p*(1-p)/n)) %>%
select(ES, p, p_l, p_u) %>%
mutate(REML = 0,
method = 3)
data_alpha.nB <- t(apply(ES, function(x) replicate(nsim.mixed, test_PB.fixed(model, data = sim_data.n_int(beta_obs = x), nsim.pb = nsim.pb, cl = cl))))
data_alpha.nB <- t(sapply(ES, function(x) replicate(nsim.mixed, test_PB.fixed(model, data = sim_data.n_int(beta_obs = x), nsim.pb = nsim.pb, cl = cl))))
#Cluster festlegen (sapply funktioniert nicht)
(nc <- detectCores()) # number of cores
cl <- makeCluster(rep("localhost", nc)) # make cluster
data_alpha.nB <- t(sapply(ES, function(x) replicate(nsim.mixed, test_PB.fixed(model, data = sim_data.n_int(beta_obs = x), nsim.pb = nsim.pb, cl = cl))))
#Parameter für parametric bootstrap
nsim.mixed <- 5 #niedriger, weil pro iteration auch noch gebootstrapped wird (mit nsim.pb)
nsim.pb <- 5
data_alpha.nB <- t(sapply(ES, function(x) replicate(nsim.mixed, test_PB.fixed(model, data = sim_data.n_int(beta_obs = x), nsim.pb = nsim.pb, cl = cl))))
colnames(data_alpha.nB) <- 1:nsim
colnames(data_alpha.nB) <- 1:nsim
data_alpha.nB_long <- as.data.frame(cbind(ES, data_alpha.nB))
data_alpha.nB_long <- gather(data_alpha.nB_long, sim, p.PB, 2:ncol(data_alpha.nB_long))
data_alpha.nB_long %>%
group_by(ES) %>%
summarize(prop_PB = mean(p.PB <= .05))
p_PB <- data_alpha.nB_long %>%
group_by(ES) %>%
summarize(k = sum(p.PB < .05) + 1.96^2/2,
n = n() + 1.96^2,
p = k/n,
p_l = p - 1.96 * sqrt(p*(1-p)/n),
p_u = p + 1.96 * sqrt(p*(1-p)/n)) %>%
select(ES, p, p_l, p_u) %>%
mutate(REML = 0,
method = 5)
p_PB
